1) Создать package – data. Работу продолжаем в нем.

2) Реализовать абстрактный класс User и его наследники Student и Teacher.
Родитель имеет в себе общие данные (пример: фио, год рождения и тд), а
наследники собственные параметры (какие, по вашему выбору – Пример:
studentId для Student, teacherId для Teacher)

3) После этого проговорить со студентами важность снижения дублирования
кода и легкость управления структурой данных (в том числе, создания
необходимого числа корректных конструкторов) и добавления новых
сущностей путем наследования от абстрактного класса.

__________________________________________________________________________

4) Создать package – service. Работу продолжаем в нем

5) Создать класс DataService с методами в по управлению сущностями User
(create, read) и агрегирующий всех пользователей заведенных в системе

6) StudentId должны быть созданы по алгоритму – максимальный id в
коллекции + 1. Аналогично и для TeacherId. Здесь решение через перебор
элементов и instanceOf

__________________________________________________________________________

7) Создать package – controller. Работу продолжаем в нем

8) Создать класс Controller агрегирующий в себе необходимые классы в виде
полей, а инициализируем прям в поле.

9) Создаем метод созданиеСтудента – реализующий логику, путем вызова
соответствующих методов интерфейсов:

10) Создания Студента в сервисе
    Возвращение всех студентов в сервисе
    Вызов view и передача списка найденных студентов
    Поставьте вид